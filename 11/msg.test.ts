import { expect, test, describe } from "bun:test"
import {
  MessageEncoder,
  MessageType,
  parseMessageHelloWillThrow,
  parseMessageTargetPopulationsWillThrow,
} from "./msg"

describe("parse msg Hello", () => {
  test("ok", () => {
    expect(
      parseMessageHelloWillThrow(
        Buffer.from([
          0x50, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x0b, 0x70, 0x65,
          0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00,
          0x00, 0x01, 0xce,
        ])
      )
    ).toEqual({
      type: MessageType.hello,
      protocol: "pestcontrol",
      version: 1,
    })
  })

  test("invalid total length", () => {
    expect(() =>
      parseMessageHelloWillThrow(Buffer.from([0x50, 0x00, 0x00, 0x00, 0x00]))
    ).toThrow()
  })

  test("str length too big", () => {
    expect(() =>
      parseMessageHelloWillThrow(
        Buffer.from([
          0x50, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xab, 0x70, 0x65,
          0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00,
          0x00, 0x01, 0xce,
        ])
      )
    ).toThrow()
  })

  test("str length too small", () => {
    expect(() =>
      parseMessageHelloWillThrow(
        Buffer.from([
          0x50, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x0a, 0x70, 0x65,
          0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00,
          0x00, 0x01, 0xce,
        ])
      )
    ).toThrow()
  })
})

describe("parse msg TargetPopulatons", () => {
  test("ok", () => {
    expect(
      parseMessageTargetPopulationsWillThrow(
        Buffer.from([
          0x54, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x30, 0x39, 0x00, 0x00,
          0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x64, 0x6f, 0x67, 0x00, 0x00,
          0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x72,
          0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80,
        ])
      )
    ).toEqual({
      type: MessageType.targetPopulations,
      site: 12345,
      populations: [
        { species: "dog", min: 1, max: 3 },
        { species: "rat", min: 0, max: 10 },
      ],
    })
  })
})

describe("Encoder", () => {
  test("error", () => {
    expect(MessageEncoder.error("bad")).toEqual(
      Buffer.from([
        0x51, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x03, 0x62, 0x61, 0x64,
        0x78,
      ])
    )

    expect(MessageEncoder.dialAuthority(12345)).toEqual(
      Buffer.from([0x53, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x30, 0x39, 0x3a])
    )
  })
})
